// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MonPetitSurf.Models;

public partial class MonPetitSurfContext : DbContext
{
    public MonPetitSurfContext()
    {
    }

    public MonPetitSurfContext(DbContextOptions<MonPetitSurfContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Spots> Spots { get; set; }

    public virtual DbSet<SpotsGetUtilities> SpotsGetUtilities { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<UsersRegisterSpots> UsersRegisterSpots { get; set; }

    public virtual DbSet<Utilities> Utilities { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb3_general_ci")
            .HasCharSet("utf8mb3");

        modelBuilder.Entity<Spots>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("spots")
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Department)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("department");
            entity.Property(e => e.Latitude)
                .HasPrecision(4, 2)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasPrecision(5, 2)
                .HasColumnName("longitude");
            entity.Property(e => e.SpotName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("spot_name");
        });

        modelBuilder.Entity<SpotsGetUtilities>(entity =>
        {
            entity.HasKey(e => new { e.SpotId, e.UtilityId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("spots_get_utilities")
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_general_ci");

            entity.HasIndex(e => e.UtilityId, "fk_spots_get_utilities_utility");

            entity.Property(e => e.SpotId).HasColumnName("spot_id");
            entity.Property(e => e.UtilityId).HasColumnName("utility_id");

            entity.HasOne(d => d.Spot).WithMany(p => p.SpotsGetUtilities)
                .HasForeignKey(d => d.SpotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spots_get_utilities_spot");

            entity.HasOne(d => d.Utility).WithMany(p => p.SpotsGetUtilities)
                .HasForeignKey(d => d.UtilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spots_get_utilities_utility");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("users")
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("username");
        });

        modelBuilder.Entity<UsersRegisterSpots>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.SpotId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity
                .ToTable("users_register_spots")
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_general_ci");

            entity.HasIndex(e => e.SpotId, "fk_users_register_spots_spot");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.SpotId).HasColumnName("spot_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Spot).WithMany(p => p.UsersRegisterSpots)
                .HasForeignKey(d => d.SpotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_users_register_spots_spot");

            entity.HasOne(d => d.User).WithMany(p => p.UsersRegisterSpots)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_users_register_spots_user");
        });

        modelBuilder.Entity<Utilities>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity
                .ToTable("utilities")
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_general_ci");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}